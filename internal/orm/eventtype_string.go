// Code generated by "stringer -type EventType"; DO NOT EDIT.

package orm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[L1DepositETH-1]
	_ = x[L1FinalizeWithdrawETH-2]
	_ = x[L2FinalizeDepositETH-101]
	_ = x[L2WithdrawETH-102]
	_ = x[L1DepositWETH-1]
	_ = x[L1FinalizeWithdrawWETH-2]
	_ = x[L1DepositDAI-3]
	_ = x[L1FinalizeWithdrawDAI-4]
	_ = x[L1DepositStandardERC20-5]
	_ = x[L1FinalizeWithdrawStandardERC20-6]
	_ = x[L1DepositCustomERC20-7]
	_ = x[L1FinalizeWithdrawCustomERC20-8]
	_ = x[L2FinalizeDepositWETH-101]
	_ = x[L2WithdrawWETH-102]
	_ = x[L2FinalizeDepositDAI-103]
	_ = x[L2WithdrawDAI-104]
	_ = x[L2FinalizeDepositStandardERC20-105]
	_ = x[L2WithdrawStandardERC20-106]
	_ = x[L2FinalizeDepositCustomERC20-107]
	_ = x[L2WithdrawCustomERC20-108]
	_ = x[L1DepositERC721-1]
	_ = x[L1FinalizeWithdrawERC721-2]
	_ = x[L2FinalizeDepositERC721-101]
	_ = x[L2WithdrawERC721-102]
	_ = x[L1DepositERC1155-1]
	_ = x[L1FinalizeWithdrawERC1155-2]
	_ = x[L2FinalizeDepositERC1155-101]
	_ = x[L2WithdrawERC1155-102]
}

const (
	_EventType_name_0 = "L1DepositETHL1FinalizeWithdrawETHL1DepositDAIL1FinalizeWithdrawDAIL1DepositStandardERC20L1FinalizeWithdrawStandardERC20L1DepositCustomERC20L1FinalizeWithdrawCustomERC20"
	_EventType_name_1 = "L2FinalizeDepositETHL2WithdrawETHL2FinalizeDepositDAIL2WithdrawDAIL2FinalizeDepositStandardERC20L2WithdrawStandardERC20L2FinalizeDepositCustomERC20L2WithdrawCustomERC20"
)

var (
	_EventType_index_0 = [...]uint8{0, 12, 33, 45, 66, 88, 119, 139, 168}
	_EventType_index_1 = [...]uint8{0, 20, 33, 53, 66, 96, 119, 147, 168}
)

func (i EventType) String() string {
	switch {
	case 1 <= i && i <= 8:
		i -= 1
		return _EventType_name_0[_EventType_index_0[i]:_EventType_index_0[i+1]]
	case 101 <= i && i <= 108:
		i -= 101
		return _EventType_name_1[_EventType_index_1[i]:_EventType_index_1[i+1]]
	default:
		return "EventType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
